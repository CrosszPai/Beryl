datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model assets {
  url        String   @id(map: "PK_1dacec3dfa5e001ebefc6367e47") @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  labId      Int?
  lab        lab?     @relation(fields: [labId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ef3446a0c18f87e88fc3bfc5871")
}

model hardware {
  id         String   @id(map: "PK_3334ecf6c630e1fb3442e88a31e") @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  queueId    Int?     @unique(map: "REL_893343408d7e2eb3ec39da2611")
  queue      queue?   @relation(fields: [queueId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_893343408d7e2eb3ec39da2611c")
}

model lab {
  id         Int       @id(map: "PK_5575ab9332d71474261beb799a4") @default(autoincrement())
  lab_name   String    @db.VarChar
  lab_detail String?   @db.VarChar
  published  Boolean   @default(false)
  repo_url   String    @unique(map: "UQ_acf0d0ba52e5823b13acbcbec82") @default("") @db.VarChar
  ownerId    Int?
  user       user?     @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_20824f5be254bed09f17a0f631a")
  assets     assets[]
  working    working[]
}

model logging {
  id         Int      @id(map: "PK_2b6eefd2a39237bdb7e3545fa55") @default(autoincrement())
  query      String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  userId     Int?
  user       user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_2e7e6843308daa3414b8afe1d1e")
}

model queue {
  id         Int       @id(map: "PK_4adefbd9c73b3f9a49985a5529f") @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  status     String    @db.VarChar
  workingId  Int?
  working    working?  @relation(fields: [workingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_2874d449367038fe504d61fda65")
  hardware   hardware?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model typeorm_metadata {
  type     String  @db.VarChar
  database String? @db.VarChar
  schema   String? @db.VarChar
  table    String? @db.VarChar
  name     String? @db.VarChar
  value    String?

  @@ignore
}

model user {
  id         Int             @id(map: "PK_cace4a159ff9f2512dd42373760")
  email      String?         @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar
  name       String?         @db.VarChar
  entered_at DateTime?       @default(now())
  role       user_role_enum
  avatar_url String          @db.VarChar
  is_admin   Boolean         @default(false)
  lab        lab[]
  logging    logging[]
  working    working[]
}

model working {
  id         Int      @id(map: "PK_70814927c4c69bf2e819d917814") @default(autoincrement())
  repo_url   String   @unique(map: "UQ_3e90dd66a78d23d36e297b69d62") @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  labId      Int
  ownerId    Int
  lab        lab      @relation(fields: [labId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_2bdeee61ea65f46d82044e954f4")
  user       user     @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_850cdde631a9aa6cad6d1a16dbf")
  queue      queue[]
}

enum user_role_enum {
  instructor
  student
  admin
}
